// Đoạn code có những phương thức di chuyển của tàu:
// + Lấy vị trí trỏ chuột
// + Object hướng đầu về phía target 
// + Object đi theo target
----------------------------------------------------------

// Sử dụng các namespace cần thiết
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// Định nghĩa lớp ShipMovement, kế thừa từ MonoBehaviour
public class ShipMovement : MonoBehaviour
{
    // Cho phép các biến được điều chỉnh trong Unity Inspector
    [SerializeField]
    protected Vector3 targetPosition; // Vị trí mục tiêu trong không gian thế giới

    [SerializeField]
    protected float speed = 0.1f; // Tốc độ di chuyển về phía mục tiêu

    // FixedUpdate được gọi ở các khoảng thời gian cố định
    void FixedUpdate()
    {
        // Lấy vị trí mục tiêu
        this.GetTargetPosition();
        
        // Quay tàu về phía mục tiêu
        this.LootAtTarget();
        
        // Di chuyển tàu về phía mục tiêu
        this.Moving();
    }

    // Phương thức lấy vị trí mục tiêu từ InputManager
    protected virtual void GetTargetPosition()
    {
        // Chuyển đổi vị trí chuột từ tọa độ màn hình sang tọa độ thế giới
        this.targetPosition = InputManager.Instance.MouseWorldPos;

        // Đảm bảo Z là 0 vì đây là môi trường 2D
        this.targetPosition.z = 0;
    }

    // Phương thức quay tàu về phía mục tiêu
    protected virtual void LootAtTarget()
    {
        // Tính toán vectơ chênh lệch giữa tàu và vị trí mục tiêu
        Vector3 diff = this.targetPosition - transform.parent.position;

        // Chuẩn hóa vectơ để có độ dài 1
        diff.Normalize();

        // Tính góc quay từ vectơ chênh lệch
        float rot_z = Mathf.Atan2(diff.y, diff.x) * Mathf.Rad2Deg;

        // Quay tàu về phía mục tiêu, sử dụng góc quay tính được
        transform.parent.rotation = Quaternion.Euler(0f, 0f, rot_z);
    }

    // Phương thức di chuyển tàu về phía mục tiêu
    protected virtual void Moving()
    {
        // Lerp (Nội suy tuyến tính) giữa vị trí hiện tại và vị trí mục tiêu dựa trên tốc độ
        Vector3 newPos = Vector3.Lerp(transform.parent.position, targetPosition, this.speed);

        // Cập nhật vị trí của tàu với giá trị nội suy
        transform.parent.position = newPos;
    }
}
